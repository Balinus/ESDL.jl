using Dates
function _precompile_()
    ccall(:jl_generating_output, Cint, ()) == 1 || return nothing
    precompile(Tuple{typeof(ESDL.DAT.getchunkoffsets), ESDL.DAT.DATConfig{1, 1}})
    precompile(Tuple{typeof(ESDL.DAT.getLoopCacheSize), Int64, Array{Int64, 1}, Float64, Array{NamedTuple{(:iloopax, :cs, :iscompressed, :innerleap), Tuple{Int64, Int64, Bool, Int64}}, 1}})
    precompile(Tuple{getfield(ESDL.DAT, Symbol("##s74#101")), Int, Int, Int, Int, Int, Int, Int, Int, Int, Int, Int, Int, Int, Int, Int, Int, Int, Int, Int, Int, Int, Int})
    precompile(Tuple{typeof(ESDL.CubeAPI.getLonLatsToRead), ESDL.CubeAPI.CubeConfig, Tuple{Int64, Int64}, Tuple{Int64, Int64}})
    precompile(Tuple{typeof(ESDL.CubeAPI.getCubeData), ESDL.CubeAPI.Cube, Array{String, 1}, Tuple{Dates.Date, Dates.Date}, Tuple{Int64, Int64}, Tuple{Int64, Int64}})
    precompile(Tuple{typeof(ESDL.DAT.allocatecachebuf), ESDL.DAT.InputCube{4}, Array{Int64, 1}})
    precompile(Tuple{typeof(ESDL.DAT.runLoop), ESDL.DAT.DATConfig{1, 1}})
    precompile(Tuple{typeof(ESDL.DAT.analyzeAxes), ESDL.DAT.DATConfig{1, 1}})
    precompile(Tuple{typeof(ESDL.ESDLTools.totuple), Array{ESDL.DAT.OutputCube, 1}})
    precompile(Tuple{typeof(ESDL.ESDLTools.totuple), Array{ESDL.Cubes.Axes.CubeAxis{T, S} where S where T, 1}})
    precompile(Tuple{typeof(ESDL.DAT.allocatecachebuf), ESDL.DAT.OutputCube, Array{Int64, 1}})
    precompile(Tuple{typeof(ESDL.ESDLTools.totuple), Array{Int64, 1}})
    precompile(Tuple{typeof(ESDL.CubeAPI.readFromDataYear), ESDL.CubeAPI.Cube, Base.SubArray{Float32, 3, Array{Float32, 4}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}, Base.SubArray{UInt8, 3, Array{UInt8, 4}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}, String, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64})
    precompile(Tuple{getfield(ESDL.DAT, Symbol("##90#95")), ESDL.DAT.OutputCube})
    precompile(Tuple{typeof(ESDL.DAT.updateinars), ESDL.DAT.DATConfig{1, 1}, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}, Base.UnitRange{Int64}}})
    precompile(Tuple{getfield(ESDL.CubeAPI, Symbol("##getCubeData#7")), Array{Int64, 1}, Array{Any, 1}, Tuple{Int64, Int64}, Tuple{Int64, Int64}, Array{Any, 1}, typeof(identity), (ESDL.CubeAPI).Cube})
    precompile(Tuple{typeof(ESDL.Cubes._read), ESDL.CubeAPI.SubCubeVPerm{Float32}, Tuple{Base.SubArray{Float32, 4, Array{Float32, 4}, Tuple{Base.IteratorsMD.CartesianIndices{4, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}, Base.UnitRange{Int64}, Base.UnitRange{Int64}}}}, false}, Base.SubArray{UInt8, 4, Array{UInt8, 4}, Tuple{Base.IteratorsMD.CartesianIndices{4, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}, Base.UnitRange{Int64}, Base.UnitRange{Int64}}}}, false}}, Base.IteratorsMD.CartesianIndices{4, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}, Base.UnitRange{Int64}, Base.UnitRange{Int64}}}})
    precompile(Tuple{typeof(ESDL.Cubes.caxes), ESDL.CubeAPI.SubCubeV{Float32, ESDL.CubeAPI.Cube}})
    precompile(Tuple{typeof(ESDL.Proc.MSC.fillmsc), Int64, Array{Float64, 1}, Array{Int64, 1}, Array{Float32, 1}, Int64})
    precompile(Tuple{typeof(ESDL.DAT.__init__)})
    precompile(Tuple{getfield(ESDL.DAT, Symbol("##104#117")), Int64})
    precompile(Tuple{getfield(ESDL.DAT, Symbol("##105#118")), Int64})
    precompile(Tuple{typeof(ESDL.Cubes.chunkoffset), ESDL.CubeAPI.SubCubeV{Float32, ESDL.CubeAPI.Cube}})
    precompile(Tuple{typeof(ESDL.Cubes.cubechunks), ESDL.CubeAPI.SubCubeVPerm{Float32}})
    precompile(Tuple{typeof(ESDL.DAT.getRetCubeType), ESDL.DAT.OutputCube, Bool, Float64})
    precompile(Tuple{typeof(ESDL.CubeAPI.parseEntry), ESDL.CubeAPI.CubeConfig, ESDL.CubeAPI.ConfigEntry{:ref_time}})
    precompile(Tuple{getfield(ESDL.DAT, Symbol("##114#127")), Int64})
    precompile(Tuple{getfield(ESDL.DAT, Symbol("##128#129")), Int64})
    precompile(Tuple{typeof(ESDL.Cubes.chunkoffset), ESDL.CubeAPI.SubCubeVPerm{Float32}})
    precompile(Tuple{typeof(ESDL.ESDLTools.freshworkermodule)})
    precompile(Tuple{typeof(ESDL.CubeAPI.expandknownvars), Array{String, 1}})
    precompile(Tuple{typeof(ESDL.CubeAPI.parseConfig), Array{Base.SubString{String}, 1}})
    precompile(Tuple{typeof(ESDL.CubeAPI.parseEntry), ESDL.CubeAPI.CubeConfig, ESDL.CubeAPI.ConfigEntry{:end_time}})
    precompile(Tuple{typeof(((ESDL.Cubes).Axes).getOutAxis), Tuple{((ESDL.Cubes).Axes).ByName}, Array{(((ESDL.Cubes).Axes).CubeAxis{T, S} where S) where T, 1}, Tuple{(ESDL.CubeAPI).SubCubeV{Float32, (ESDL.CubeAPI).Cube}}, Tuple{Int64, Array{Float64, 1}, Array{Int64, 1}}, typeof(identity)})
    precompile(Tuple{typeof(ESDL.CubeAPI.parseEntry), ESDL.CubeAPI.CubeConfig, ESDL.CubeAPI.ConfigEntry{:calendar}})
    precompile(Tuple{typeof(ESDL.CubeAPI.parseEntry), ESDL.CubeAPI.CubeConfig, ESDL.CubeAPI.ConfigEntry{:start_time}})
    precompile(Tuple{typeof(ESDL.CubeAPI.parseEntry), ESDL.CubeAPI.CubeConfig, ESDL.CubeAPI.ConfigEntry{:file_format}})
    precompile(Tuple{typeof((ESDL.DAT).generateOutCube), Type{((ESDL.Cubes).CubeMem{T, N} where N) where T}, Type{Int}, (ESDL.DAT).OutputCube, Array{Int64, 1}})
    precompile(Tuple{getfield(ESDL.DAT, Symbol("##113#126")), Int64})
    precompile(Tuple{typeof(ESDL.DAT.getCacheSizes), ESDL.DAT.DATConfig{1, 1}})
    precompile(Tuple{typeof(ESDL.CubeAPI.parseEntry), ESDL.CubeAPI.CubeConfig, ESDL.CubeAPI.ConfigEntry{:model_version}})
    precompile(Tuple{typeof(ESDL.CubeAPI.getTimesToRead), Dates.Date, Dates.Date, ESDL.CubeAPI.CubeConfig})
    precompile(Tuple{getfield(ESDL.DAT, Symbol("##110#123")), Int64})
    precompile(Tuple{typeof(ESDL.Cubes.cubechunks), ESDL.CubeAPI.SubCubeV{Float32, ESDL.CubeAPI.Cube}})
    precompile(Tuple{typeof(ESDL.Cubes.Axes.findAxis), ESDL.Cubes.Axes.ByName, Array{ESDL.Cubes.Axes.CubeAxis{T, S} where S where T, 1}})
    precompile(Tuple{typeof(ESDL.Cubes.Axes.findAxis), ESDL.Cubes.Axes._RangeAxis{Dates.Date, :Time, ESDL.Cubes.Axes.YearStepRange}, Array{ESDL.Cubes.Axes.CubeAxis{T, S} where S where T, 1}})
    precompile(Tuple{typeof(ESDL.Cubes.Axes.findAxis), ESDL.Cubes.Axes._RangeAxis{Float64, :Lat, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, ESDL.CubeAPI.SubCubeVPerm{Float32}})
    precompile(Tuple{getfield(ESDL.DAT, Symbol("##mapCube#54")), Float64, (ESDL.DAT).InDims, (ESDL.DAT).OutDims, Bool, String, Bool, Bool, Bool, (Base.Iterators).Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof((ESDL.DAT).mapCube), typeof(((ESDL.Proc).MSC).removeMSC), Tuple{(ESDL.CubeAPI).SubCubeV{Float32, (ESDL.CubeAPI).Cube}}, Int64, Int})
    precompile(Tuple{typeof(ESDL.Cubes.Axes.findAxis), ESDL.Cubes.Axes._RangeAxis{Float64, :Lat, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Array{ESDL.Cubes.Axes.CubeAxis{T, S} where S where T, 1}})
    precompile(Tuple{typeof(ESDL.Cubes.Axes.findAxis), ESDL.Cubes.Axes._RangeAxis{Float64, :Lon, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, Array{ESDL.Cubes.Axes.CubeAxis{T, S} where S where T, 1}})
    precompile(Tuple{typeof(ESDL.Cubes.Axes.findAxis), ESDL.Cubes.Axes.CategoricalAxis{String, :Variable, Array{String, 1}}, ESDL.CubeAPI.SubCubeVPerm{Float32}})
    precompile(Tuple{typeof(ESDL.Cubes.Axes.findAxis), ESDL.Cubes.Axes._RangeAxis{Float64, :Lon, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, ESDL.CubeAPI.SubCubeVPerm{Float32}})
    precompile(Tuple{typeof(ESDL.Cubes.Axes.findAxis), ESDL.Cubes.Axes.CategoricalAxis{String, :Variable, Array{String, 1}}, Array{ESDL.Cubes.Axes.CubeAxis{T, S} where S where T, 1}})
    precompile(Tuple{getfield(ESDL.CubeAPI, Symbol("#kw##getCubeData")), NamedTuple{(:longitude, :latitude), Tuple{Tuple{Int64, Int64}, Tuple{Int64, Int64}}}, typeof(ESDL.CubeAPI.getCubeData), ESDL.CubeAPI.Cube})
    precompile(Tuple{getfield(ESDL.DAT, Symbol("##106#119")), Int64})
    precompile(Tuple{typeof(ESDL.CubeAPI.getLandSeaMask!), Array{UInt8, 4}, ESDL.CubeAPI.Cube, Int64, Int64, Int64, Int64})
    precompile(Tuple{typeof(ESDL.Proc.MSC.removeMSC), ESDL.Cubes.Mask.MaskArray{Float32, 1, Array{Float32, 1}}, ESDL.Cubes.Mask.MaskArray{Float32, 1, Array{Float32, 1}}, Int64, Array{Float64, 1}, Array{Int64, 1}})
    precompile(Tuple{getfield(ESDL.ESDLTools, Symbol("##s12#5")), Int, Int, Int, Int, Int, Int, Int, Int})
    precompile(Tuple{typeof(ESDL.DAT.reOrderInCubes), ESDL.DAT.DATConfig{1, 1}})
    precompile(Tuple{typeof(ESDL.DAT.getFrontPerm), ESDL.CubeAPI.SubCubeV{Float32, ESDL.CubeAPI.Cube}, Array{ESDL.Cubes.Axes.CubeAxis{T, S} where S where T, 1}})
    precompile(Tuple{typeof(ESDL.CubeAPI.parseEntry), ESDL.CubeAPI.CubeConfig, ESDL.CubeAPI.ConfigEntry{:chunk_sizes}})
    precompile(Tuple{getfield((ESDL.Proc).MSC, Symbol("##removeMSC#3")), (Base.Iterators).Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(identity), (ESDL.CubeAPI).SubCubeV{Float32, (ESDL.CubeAPI).Cube}})
    precompile(Tuple{typeof((ESDL.DAT).createworkarray), Type{Int}, Tuple{Int64}})
    precompile(Tuple{typeof(ESDL.ESDLTools.mypermutedims!), Base.SubArray{Float32, 4, Array{Float32, 4}, Tuple{Base.IteratorsMD.CartesianIndices{4, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}, Base.UnitRange{Int64}, Base.UnitRange{Int64}}}}, false}, Array{Float32, 4}, Type{Base.Val{(3, 1, 2, 4)}}})
    precompile(Tuple{typeof(ESDL.DAT.runLoop), ESDL.DAT.DATConfig{1, 1}, Base.Iterators.ProductIterator{Tuple{Array{Base.UnitRange{Int64}, 1}, Array{Base.UnitRange{Int64}, 1}, Array{Base.UnitRange{Int64}, 1}}}})
    precompile(Tuple{typeof(ESDL.CubeAPI.parseEntry), ESDL.CubeAPI.CubeConfig, ESDL.CubeAPI.ConfigEntry{:static_data}})
    precompile(Tuple{typeof(ESDL.ESDLTools.mypermutedims!), Base.SubArray{UInt8, 4, Array{UInt8, 4}, Tuple{Base.IteratorsMD.CartesianIndices{4, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}, Base.UnitRange{Int64}, Base.UnitRange{Int64}}}}, false}, Array{UInt8, 4}, Type{Base.Val{(3, 1, 2, 4)}}})
    precompile(Tuple{typeof(ESDL.Cubes.caxes), ESDL.CubeAPI.SubCubeVPerm{Float32}})
    precompile(Tuple{typeof(ESDL.CubeAPI.parseEntry), ESDL.CubeAPI.CubeConfig, ESDL.CubeAPI.ConfigEntry{:compression}})
    precompile(Tuple{getfield(ESDL.DAT, Symbol("##88#93")), ESDL.DAT.InputCube{4}})
    precompile(Tuple{typeof(ESDL.CubeAPI.getvartype), ESDL.CubeAPI.Cube, String})
    precompile(Tuple{getfield(ESDL.DAT, Symbol("#kw##mapCube")), NamedTuple{(:indims, :outdims), Tuple{(ESDL.DAT).InDims, (ESDL.DAT).OutDims}}, typeof((ESDL.DAT).mapCube), typeof(identity), (ESDL.CubeAPI).SubCubeV{Float32, (ESDL.CubeAPI).Cube}, Int64, Int})
    precompile(Tuple{typeof((ESDL.DAT).setSubRange2), ((ESDL.Cubes).Mask).MaskArray{Float32, 1, Array{Float32, 1}}, Tuple{Array{Float32, 4}, Array{UInt8, 4}}, typeof(identity), Int})
    precompile(Tuple{typeof(ESDL.DAT.innerLoop), typeof(ESDL.Proc.MSC.removeMSC), Tuple{Tuple{Array{Float32, 4}, Array{UInt8, 4}}}, Tuple{Tuple{Array{Float32, 4}, Array{UInt8, 4}}}, Tuple{Tuple{ESDL.DAT.AllMissing}}, ESDL.DAT.InnerObj{(1,), (1,), ((1, 2, 3), (1, 2, 3)), true, (), false}, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Tuple{ESDL.Cubes.Mask.MaskArray{Float32, 1, Array{Float32, 1}}}, Tuple{ESDL.Cubes.Mask.MaskArray{Float32, 1, Array{Float32, 1}}}, Tuple{ESDL.Cubes.Axes._RangeAxis{Float64, :Lon, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, ESDL.Cubes.Axes._RangeAxis{Float64, :Lat, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, ESDL.Cubes.Axes.CategoricalAxis{String, :Variable, Array{String, 1}}}, Tuple{Int64, Array{Float64, 1}, Array{Int64, 1}}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}})
    precompile(Tuple{typeof((ESDL.DAT).getSubRange), Tuple{Array{Float32, 4}, Array{UInt8, 4}}, typeof(identity), Int})
    precompile(Tuple{typeof((ESDL.DAT).getSubRange2), ((ESDL.Cubes).Mask).MaskArray{Float32, 1, Array{Float32, 1}}, Tuple{Array{Float32, 4}, Array{UInt8, 4}}, typeof(identity), Int})
    precompile(Tuple{typeof(ESDL.CubeAPI.parseEntry), ESDL.CubeAPI.CubeConfig, ESDL.CubeAPI.ConfigEntry{:temporal_res}})
    precompile(Tuple{typeof(ESDL.CubeAPI.parseEntry), ESDL.CubeAPI.CubeConfig, ESDL.CubeAPI.ConfigEntry{:comp_level}})
    precompile(Tuple{typeof(ESDL.CubeAPI.defaulttime), ESDL.CubeAPI.Cube, Array{Int64, 1}})
    precompile(Tuple{getfield(ESDL.DAT, Symbol("##mapCube#52")), (Base.Iterators).Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:indims, :outdims), Tuple{(ESDL.DAT).InDims, (ESDL.DAT).OutDims}}}, typeof(identity), typeof(identity), (ESDL.CubeAPI).SubCubeV{Float32, (ESDL.CubeAPI).Cube}, Int64, Int})
    precompile(Tuple{typeof(ESDL.CubeAPI.parseEntry), ESDL.CubeAPI.CubeConfig, ESDL.CubeAPI.ConfigEntry{:spatial_res}})
    precompile(Tuple{typeof(ESDL.CubeAPI.parseEntry), ESDL.CubeAPI.CubeConfig, ESDL.CubeAPI.ConfigEntry{:grid_x0}})
    precompile(Tuple{typeof(ESDL.CubeAPI.parseEntry), ESDL.CubeAPI.CubeConfig, ESDL.CubeAPI.ConfigEntry{:grid_width}})
    precompile(Tuple{typeof(ESDL.Proc.getNpY), ESDL.CubeAPI.SubCubeV{Float32, ESDL.CubeAPI.Cube}})
    precompile(Tuple{typeof(ESDL.CubeAPI.parseEntry), ESDL.CubeAPI.CubeConfig, ESDL.CubeAPI.ConfigEntry{:grid_y0}})
    precompile(Tuple{typeof(ESDL.CubeAPI.parseEntry), ESDL.CubeAPI.CubeConfig, ESDL.CubeAPI.ConfigEntry{:variables}})
    precompile(Tuple{typeof(ESDL.Cubes._read), ESDL.CubeAPI.SubCubeV{Float32, ESDL.CubeAPI.Cube}, Tuple{Array{Float32, 4}, Array{UInt8, 4}}, Base.IteratorsMD.CartesianIndices{4, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}, Base.UnitRange{Int64}, Base.UnitRange{Int64}}}})
    precompile(Tuple{getfield(ESDL.ESDLTools, Symbol("##s13#18")), Int, Int, Int, Int})
    precompile(Tuple{typeof(ESDL.CubeAPI.parseEntry), ESDL.CubeAPI.CubeConfig, ESDL.CubeAPI.ConfigEntry{:grid_height}})
    precompile(Tuple{typeof(ESDL.Cubes.iscompressed), ESDL.CubeAPI.Cube})
    precompile(Tuple{typeof((ESDL.DAT).mysizeof), Type{Int}})
    precompile(Tuple{typeof(((ESDL.Cubes).Axes).getOutAxis), Tuple{}, Array{(((ESDL.Cubes).Axes).CubeAxis{T, S} where S) where T, 1}, Tuple{(ESDL.CubeAPI).SubCubeV{Float32, (ESDL.CubeAPI).Cube}}, Tuple{Int64, Array{Float64, 1}, Array{Int64, 1}}, typeof(identity)})
    precompile(Tuple{typeof(ESDL.Proc.MSC.removeMSC), ESDL.CubeAPI.SubCubeV{Float32, ESDL.CubeAPI.Cube}})
    precompile(Tuple{typeof(ESDL.Cubes.iscompressed), ESDL.CubeAPI.SubCubeVPerm{Float32}})
    precompile(Tuple{typeof(ESDL.DAT.getCubeHandles), ESDL.DAT.DATConfig{1, 1}})
    precompile(Tuple{getfield(ESDL.CubeAPI, Symbol("##Cube#1")), String, Type{Int}})
    precompile(Tuple{typeof(ESDL.DAT.generateworkarrays), ESDL.DAT.DATConfig{1, 1}})
    precompile(Tuple{typeof(ESDL.CubeAPI.readAllyears), ESDL.CubeAPI.SubCubeV{Float32, ESDL.CubeAPI.Cube}, Array{Float32, 4}, Array{UInt8, 4}, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64})
    precompile(Tuple{typeof(ESDL.DAT.updatears), ESDL.DAT.DATConfig{1, 1}, Tuple{ESDL.DAT.InputCube{4}}, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}, Base.UnitRange{Int64}}, typeof(ESDL.Cubes._read)})
    precompile(Tuple{typeof(ESDL.DAT.generateOutCubes), ESDL.DAT.DATConfig{1, 1}})
    precompile(Tuple{typeof(ESDL.ESDLTools.totuple), Tuple{Int64}})
    precompile(Tuple{typeof(ESDL.DAT.mustReorder), ESDL.CubeAPI.SubCubeV{Float32, ESDL.CubeAPI.Cube}, Array{ESDL.Cubes.Axes.CubeAxis{T, S} where S where T, 1}})
    precompile(Tuple{getfield(ESDL.DAT, Symbol("##97#99")), Int64, Int64, Int64})
    precompile(Tuple{getfield(ESDL.DAT, Symbol("##89#94")), Array{Int64, 1}, ESDL.DAT.InputCube{4}})
    precompile(Tuple{typeof(ESDL.DAT.setworkarray), ESDL.DAT.OutputCube})
    precompile(Tuple{typeof(ESDL.Cubes.Axes.axname), Type{ESDL.Cubes.Axes._RangeAxis{Float64, :Lat, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}})
    precompile(Tuple{typeof(ESDL.Cubes._write), ESDL.Cubes.CubeMem{Float32, 4}, Tuple{Base.SubArray{Float32, 4, Array{Float32, 4}, Tuple{Base.IteratorsMD.CartesianIndices{4, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}, Base.UnitRange{Int64}, Base.UnitRange{Int64}}}}, false}, Base.SubArray{UInt8, 4, Array{UInt8, 4}, Tuple{Base.IteratorsMD.CartesianIndices{4, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}, Base.UnitRange{Int64}, Base.UnitRange{Int64}}}}, false}}, Base.IteratorsMD.CartesianIndices{4, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}, Base.UnitRange{Int64}, Base.UnitRange{Int64}}}})
    precompile(Tuple{typeof(ESDL.Cubes.Axes.axname), Type{ESDL.Cubes.Axes._RangeAxis{Float64, :Lon, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}})
    precompile(Tuple{typeof(ESDL.DAT.wrapWorkArray), ESDL.DAT.AsArray, ESDL.Cubes.Mask.MaskArray{Float32, 1, Array{Float32, 1}}, Array{ESDL.Cubes.Axes.CubeAxis{T, S} where S where T, 1}})
    precompile(Tuple{getfield(ESDL.DAT, Symbol("#kw##mapCube")), NamedTuple{(:indims, :outdims), Tuple{(ESDL.DAT).InDims, (ESDL.DAT).OutDims}}, typeof((ESDL.DAT).mapCube), typeof(identity), Tuple{(ESDL.CubeAPI).SubCubeV{Float32, (ESDL.CubeAPI).Cube}}, Int64, Int})
    precompile(Tuple{typeof(ESDL.DAT.distributeLoopRanges), Tuple{Int64, Int64, Int64}, Tuple{Int64, Int64, Int64}, Tuple{Int64, Int64, Int64}})
    precompile(Tuple{typeof(ESDL.Cubes.Axes.axname), Type{ESDL.Cubes.Axes.CategoricalAxis{String, :Variable, Array{String, 1}}}})
    precompile(Tuple{typeof(ESDL.DAT.setworkarray), ESDL.DAT.InputCube{4}})
    precompile(Tuple{typeof(ESDL.DAT.generateOutCube), ESDL.DAT.OutputCube, Bool, Float64, Array{Int64, 1}})
    precompile(Tuple{typeof(ESDL.DAT.mask2miss), Tuple{Base.SubArray{Float32, 1, Array{Float32, 4}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64, Int64, Int64}, true}, Base.SubArray{UInt8, 1, Array{UInt8, 4}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64, Int64, Int64}, true}}, ESDL.Cubes.Mask.MaskArray{Float32, 1, Array{Float32, 1}}})
    precompile(Tuple{typeof(ESDL.DAT.miss2mask!), Tuple{Base.SubArray{Float32, 1, Array{Float32, 4}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64, Int64, Int64}, true}, Base.SubArray{UInt8, 1, Array{UInt8, 4}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64, Int64, Int64}, true}}, ESDL.Cubes.Mask.MaskArray{Float32, 1, Array{Float32, 1}}})
end
